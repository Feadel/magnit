{"version":3,"sources":["entities/ETaskStatus.ts","entities/index.ts","containers/task-info/TaskInfo.tsx","containers/task-info/CreateTask.tsx","containers/task-info/EditTask.tsx","containers/task-info/index.ts"],"names":["ETaskStatus","__webpack_require__","d","__webpack_exports__","TaskInfo","steps","title","Object","core_browser_esm","Typography","css","theme","fontSize","large","content","Grid","container","direction","normal","smaller","completed","section_layout","section_title","item","dist","variant","scheme","icon","icons_dist","margin","concat","spacing","maxWidth","maxTemplateWidth","position","padding","zIndex","focused","TaskInfo_Head","status","CHECKED","xs","marginTop","TaskInfo_MainInfo","value","map","part","MainInfo","_ref","color","colors","secondary","textTransform","black","Head","_ref2","getColorByStatus","_ETaskStatus$IN_PROGR2","defineProperty","IN_PROGRESS","violet","darkYellow","DONE","green","DRAFT","key","paddingLeft","paddingRight","width","height","borderRadius","display","background","_ETaskStatus$IN_PROGR","getTitleByStatus","CreateTask","CreateTask_TaskFieldContainer","label","placeholder","fullWidth","alignItems","index","TaskFieldContainer","children","component","EditTask","EditTask_TaskFieldContainer","marginLeft","_templateObject","TaskInfo_TaskInfo","CreateTask_CreateTask","EditTask_EditTask"],"mappings":"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","file":"static/js/2.0e78cc26.chunk.js","sourcesContent":["export enum ETaskStatus {\n    IN_PROGRESS = \"in-progress\",\n    CHECKED = \"checked\",\n    DRAFT = \"draft\",\n    DONE = \"done\",\n}\n","export * from \"./ETaskStatus\";\n","/** @jsx jsx */\n\nimport * as React from \"react\";\nimport { jsx } from \"@emotion/core\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { SectionTitle } from \"components/section-title\";\nimport { SectionLayout } from \"components/section-layout\";\nimport { CustomButton, SelectableBlockWrapper, StepperWrapper } from \"@magnit/components\";\nimport { CheckIcon } from \"@magnit/icons\";\nimport { ETaskStatus } from \"../../entities\";\n\nexport const TaskInfo: React.FC = () => {\n    const steps = [\n        {\n            title: (\n                <Typography css={theme => ({ fontSize: theme.fontSize.large })}>\n                    Подготовка технического плана\n                </Typography>\n            ),\n            content: (\n                <Grid container direction={\"column\"}>\n                    <Typography css={theme => ({ fontSize: theme.fontSize.normal })}>\n                        до 07.07.2019 (просрочено)\n                    </Typography>\n                    <Typography css={theme => ({ fontSize: theme.fontSize.smaller })}>\n                        История изменений\n                    </Typography>\n                </Grid>\n            ),\n            completed: true,\n        },\n        {\n            title: (\n                <Typography css={theme => ({ fontSize: theme.fontSize.large })}>\n                    Подготовка технического плана\n                </Typography>\n            ),\n            content: (\n                <Grid container direction={\"column\"}>\n                    <Typography css={theme => ({ fontSize: theme.fontSize.normal })}>\n                        до 07.07.2019 (просрочено)\n                    </Typography>\n                    <Typography css={theme => ({ fontSize: theme.fontSize.smaller })}>\n                        История изменений\n                    </Typography>\n                </Grid>\n            ),\n        },\n    ];\n\n    const parts = [\n        { title: \"Документы\" },\n        { title: \"Ведомость работ\" },\n        { title: \"Бриф\" },\n        { title: \"Инженерное заключение\" },\n        { title: \"Смета\" },\n    ];\n\n    return (\n        <SectionLayout>\n            <SectionTitle title=\"Информация о задании\">\n                <Grid item>\n                    <CustomButton\n                        variant=\"contained\"\n                        title=\"Завершить\"\n                        scheme=\"green\"\n                        icon={<CheckIcon />}\n                        css={theme => ({ margin: `0 ${theme.spacing(1)}` })}\n                    />\n                    <CustomButton\n                        variant=\"contained\"\n                        title=\"Отправить\"\n                        scheme=\"violet\"\n                        icon={<CheckIcon />}\n                        css={theme => ({ margin: `0 ${theme.spacing(1)}` })}\n                    />\n                    <CustomButton\n                        variant=\"contained\"\n                        title=\"Редактировать\"\n                        scheme=\"blueOutline\"\n                        icon={<CheckIcon />}\n                        css={theme => ({ margin: `0 ${theme.spacing(1)}` })}\n                    />\n                </Grid>\n            </SectionTitle>\n            <Grid\n                css={theme => ({\n                    maxWidth: theme.maxTemplateWidth,\n                    margin: theme.spacing(4),\n                    position: \"relative\",\n                })}\n            >\n                <SelectableBlockWrapper\n                    css={theme => ({\n                        padding: theme.spacing(3),\n                        zIndex: 1300,\n                    })}\n                    focused\n                >\n                    <Head\n                        title=\"Хардкорное задание для суровых прорабов\"\n                        status={ETaskStatus.CHECKED}\n                    />\n                    <Grid container spacing={2}>\n                        <Grid item xs css={theme => ({ marginTop: theme.spacing(4) })}>\n                            <Grid container direction={\"row\"}>\n                                <MainInfo title=\"Администратор\" value=\"Andrey_555\" />\n                                <MainInfo\n                                    title=\"Исполнитель\"\n                                    value=\"Рукастый Иннокентий Петрович\"\n                                />\n                            </Grid>\n                            <Grid\n                                container\n                                direction={\"row\"}\n                                css={theme => ({ marginTop: theme.spacing(3) })}\n                            >\n                                <MainInfo\n                                    title=\"Местоположение\"\n                                    value=\"Челябинская область, Челябинск, улица Железная, 5\"\n                                />\n                                <MainInfo title=\"Формат объекта\" value=\"МК\" />\n                            </Grid>\n                        </Grid>\n                        <Grid item xs>\n                            <StepperWrapper steps={steps} />\n                        </Grid>\n                    </Grid>\n                </SelectableBlockWrapper>\n                {parts.map(part => (\n                    <SelectableBlockWrapper css={theme => ({ padding: theme.spacing(3) })}>\n                        <Head title={part.title} />\n                    </SelectableBlockWrapper>\n                ))}\n            </Grid>\n        </SectionLayout>\n    );\n};\n\ninterface IMainInfoProps {\n    title: string;\n    value: string;\n}\n\nconst MainInfo: React.FC<IMainInfoProps> = ({ title, value }) => {\n    return (\n        <Grid item xs>\n            <Typography\n                css={theme => ({\n                    color: theme.colors.secondary,\n                    fontSize: theme.fontSize.smaller,\n                    textTransform: \"uppercase\",\n                })}\n            >\n                {title}\n            </Typography>\n            <Typography\n                css={theme => ({\n                    fontSize: theme.fontSize.normal,\n                    color: theme.colors.black,\n                })}\n            >\n                {value}\n            </Typography>\n        </Grid>\n    );\n};\n\ninterface IHeadProps {\n    title: string;\n    status?: string;\n}\n\nconst Head: React.FC<IHeadProps> = ({ title, status }) => {\n    function getTitleByStatus(status: ETaskStatus): string {\n        return {\n            [ETaskStatus.IN_PROGRESS]: \"В работе\",\n            [ETaskStatus.CHECKED]: \"На проверке\",\n            [ETaskStatus.DONE]: \"Завершено\",\n            [ETaskStatus.DRAFT]: \"Черновик\",\n        }[status];\n    }\n\n    function getColorByStatus(theme: any, status: ETaskStatus): string {\n        return {\n            [ETaskStatus.IN_PROGRESS]: theme.colors.violet,\n            [ETaskStatus.CHECKED]: theme.colors.darkYellow,\n            [ETaskStatus.DONE]: theme.colors.green,\n            [ETaskStatus.DRAFT]: theme.colors.secondary,\n        }[status];\n    }\n\n    return (\n        <Grid container spacing={2} key={title}>\n            <Grid\n                item\n                xs={12}\n                css={theme => ({\n                    paddingLeft: theme.spacing(4),\n                    paddingRight: theme.spacing(4),\n                })}\n            >\n                <Typography css={theme => ({ fontSize: theme.fontSize.large })}>{title}</Typography>\n            </Grid>\n            {!!status && (\n                <Grid item>\n                    <span\n                        css={theme => ({\n                            width: theme.spacing(),\n                            height: theme.spacing(),\n                            borderRadius: \"50%\",\n                            display: \"inline-block\",\n                            background: getColorByStatus(theme, status as ETaskStatus),\n                            margin: \"2px 10px 2px 0\",\n                        })}\n                    />\n                    <span\n                        css={theme => ({ color: getColorByStatus(theme, status as ETaskStatus) })}\n                    >\n                        {status && getTitleByStatus(status as ETaskStatus)}\n                    </span>\n                </Grid>\n            )}\n        </Grid>\n    );\n};\n","/** @jsx jsx */\n\nimport * as React from \"react\";\nimport { SectionLayout } from \"components/section-layout\";\nimport { SectionTitle } from \"components/section-title\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { jsx } from \"@emotion/core\";\nimport {\n    CustomButton,\n    DateField,\n    InputField,\n    SelectableBlockWrapper,\n    SelectField,\n} from \"@magnit/components\";\nimport { CheckIcon } from \"@magnit/icons\";\n\nexport const CreateTask: React.FC = () => {\n    const parts = [{ title: \"Документы\" }];\n\n    return (\n        <SectionLayout>\n            <SectionTitle title=\"Создание задания\">\n                <Grid item>\n                    <CustomButton\n                        variant=\"contained\"\n                        title=\"Сохранить\"\n                        scheme=\"green\"\n                        icon={<CheckIcon />}\n                        css={theme => ({ margin: `0 ${theme.spacing(1)}` })}\n                    />\n                    <CustomButton\n                        variant=\"contained\"\n                        title=\"Отправить\"\n                        scheme=\"violet\"\n                        icon={<CheckIcon />}\n                        css={theme => ({ margin: `0 ${theme.spacing(1)}` })}\n                    />\n                </Grid>\n            </SectionTitle>\n            <Grid\n                css={theme => ({\n                    maxWidth: theme.maxTemplateWidth,\n                    margin: theme.spacing(4),\n                    position: \"relative\",\n                })}\n            >\n                <SelectableBlockWrapper\n                    css={theme => ({\n                        padding: theme.spacing(3),\n                        zIndex: 1300,\n                    })}\n                    focused\n                >\n                    <Grid container css={theme => ({ padding: `0 ${theme.spacing(4)}` })}>\n                        <Grid item xs={12}>\n                            <Typography css={theme => ({ fontSize: theme.fontSize.large })}>\n                                Основная информация\n                            </Typography>\n                        </Grid>\n                        <TaskFieldContainer label=\"Название задания\">\n                            <InputField placeholder=\"Введите название задания\" fullWidth />\n                        </TaskFieldContainer>\n                        <TaskFieldContainer label=\"Этап задания\">\n                            <Grid container direction=\"row\" alignItems=\"flex-end\" spacing={2}>\n                                <Grid item xs>\n                                    <InputField placeholder=\"Введите название этапа\" fullWidth />\n                                </Grid>\n                                <Grid item>\n                                    <DateField placeholder=\"Срок выполнения\" />\n                                </Grid>\n                            </Grid>\n                        </TaskFieldContainer>\n                        <TaskFieldContainer label=\"Местоположение\">\n                            <Grid container direction=\"row\" alignItems=\"flex-end\" spacing={2}>\n                                <Grid item xs>\n                                    <SelectField placeholder=\"Регион\" fullWidth />\n                                </Grid>\n                                <Grid item xs>\n                                    <SelectField placeholder=\"Филиал\" fullWidth />\n                                </Grid>\n                                <Grid item xs>\n                                    <SelectField placeholder=\"Формат\" fullWidth />\n                                </Grid>\n                                <Grid item xs>\n                                    <SelectField placeholder=\"Адрес\" fullWidth />\n                                </Grid>\n                            </Grid>\n                        </TaskFieldContainer>\n                        <TaskFieldContainer label=\"Исполнитель\">\n                            <Grid item xs={4}>\n                                <SelectField placeholder=\"Выберите исполнителя\" fullWidth />\n                            </Grid>\n                        </TaskFieldContainer>\n                    </Grid>\n                </SelectableBlockWrapper>\n                {parts.map((part, index) => (\n                    <SelectableBlockWrapper\n                        css={theme => ({ padding: theme.spacing(3) })}\n                        key={index}\n                    >\n                        <Grid container css={theme => ({ padding: `0 ${theme.spacing(4)}` })}>\n                            <Grid item xs={12}>\n                                <Typography css={theme => ({ fontSize: theme.fontSize.large })}>\n                                    {part.title}\n                                </Typography>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TaskFieldContainer label=\"Шаблон\">\n                                    <Grid item xs={3}>\n                                        <SelectField placeholder=\"Выбрать шаблон\" fullWidth />\n                                    </Grid>\n                                </TaskFieldContainer>\n                            </Grid>\n                        </Grid>\n                    </SelectableBlockWrapper>\n                ))}\n            </Grid>\n        </SectionLayout>\n    );\n};\n\ninterface ITaskFieldProps {\n    label: string;\n}\n\nconst TaskFieldContainer: React.FC<ITaskFieldProps> = ({ label, children }) => {\n    return (\n        <Grid\n            container\n            direction=\"row\"\n            spacing={2}\n            alignItems=\"flex-start\"\n            css={theme => ({ marginTop: theme.spacing() })}\n        >\n            <Grid item xs={2} css={theme => ({ marginTop: theme.spacing(2) })}>\n                <Typography component=\"span\">{label}</Typography>\n            </Grid>\n            <Grid item xs>\n                {children}\n            </Grid>\n        </Grid>\n    );\n};\n","/** @jsx jsx */\n\nimport * as React from \"react\";\nimport { SectionLayout } from \"components/section-layout\";\nimport { SectionTitle } from \"components/section-title\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { jsx, css } from \"@emotion/core\";\nimport {\n    CustomButton,\n    DateField,\n    InputField,\n    SelectableBlockWrapper,\n    SelectField,\n} from \"@magnit/components\";\nimport { AddIcon, CheckIcon } from \"@magnit/icons\";\n\nexport const EditTask: React.FC = () => {\n    const parts = [{ title: \"Документы\" }];\n\n    return (\n        <SectionLayout>\n            <SectionTitle title=\"Информация о задании\">\n                <Grid item>\n                    <CustomButton\n                        variant=\"contained\"\n                        title=\"Сохранить\"\n                        scheme=\"green\"\n                        icon={<CheckIcon />}\n                        css={theme => ({ margin: `0 ${theme.spacing(1)}` })}\n                    />\n                    <CustomButton\n                        variant=\"outlined\"\n                        title=\"Отмена\"\n                        scheme=\"violet\"\n                        icon={<CheckIcon />}\n                        css={theme => ({ margin: `0 ${theme.spacing(1)}` })}\n                    />\n                </Grid>\n            </SectionTitle>\n            <Grid\n                css={theme => ({\n                    maxWidth: theme.maxTemplateWidth,\n                    margin: theme.spacing(4),\n                    position: \"relative\",\n                })}\n            >\n                <SelectableBlockWrapper\n                    css={theme => ({\n                        padding: theme.spacing(3),\n                        zIndex: 1300,\n                    })}\n                    focused\n                >\n                    <Grid container css={theme => ({ padding: `0 ${theme.spacing(4)}` })}>\n                        <Grid item xs={12}>\n                            <Typography css={theme => ({ fontSize: theme.fontSize.large })}>\n                                Основная информация\n                            </Typography>\n                        </Grid>\n                        <TaskFieldContainer label=\"Название задания\">\n                            <Grid container direction={\"row\"} alignItems={\"flex-end\"} spacing={2}>\n                                <Grid item xs>\n                                    <InputField\n                                        placeholder={\"Введите название задания\"}\n                                        fullWidth\n                                    />\n                                </Grid>\n                            </Grid>\n                            ,\n                        </TaskFieldContainer>\n                        <TaskFieldContainer label=\"Этап задания\">\n                            <Grid container direction={\"row\"} alignItems={\"flex-end\"} spacing={2}>\n                                <Grid item xs>\n                                    <InputField placeholder={\"Введите название этапа\"} fullWidth />\n                                </Grid>\n                                <Grid item>\n                                    <DateField placeholder={\"Срок выполнения\"} />\n                                </Grid>\n                                <Grid container>\n                                    <Grid item xs css={theme => ({ marginLeft: theme.spacing() })}>\n                                        <CustomButton\n                                            variant=\"outlined\"\n                                            title=\"Добавить этап\"\n                                            scheme=\"blueOutline\"\n                                            css={css`\n                                                width: 180px;\n                                            `}\n                                            icon={<AddIcon />}\n                                        />\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                            ,\n                        </TaskFieldContainer>\n                        <TaskFieldContainer label=\"Местоположение\">\n                            <Grid container direction={\"row\"} alignItems={\"flex-end\"} spacing={2}>\n                                <Grid item xs>\n                                    <SelectField placeholder={\"Регион\"} fullWidth />\n                                </Grid>\n                                <Grid item xs>\n                                    <SelectField placeholder={\"Филиал\"} fullWidth />\n                                </Grid>\n                                <Grid item xs>\n                                    <SelectField placeholder={\"Формат\"} fullWidth />\n                                </Grid>\n                                <Grid item xs>\n                                    <SelectField placeholder={\"Адрес\"} fullWidth />\n                                </Grid>\n                            </Grid>\n                            ,\n                        </TaskFieldContainer>\n                        <TaskFieldContainer label=\"Исполнитель\">\n                            <Grid item xs={4}>\n                                <SelectField placeholder={\"Выберите исполнителя\"} fullWidth />\n                            </Grid>\n                            ,\n                        </TaskFieldContainer>\n                    </Grid>\n                </SelectableBlockWrapper>\n                {parts.map((part, index) => (\n                    <SelectableBlockWrapper\n                        css={theme => ({ padding: theme.spacing(3) })}\n                        key={index}\n                    >\n                        <Grid container css={theme => ({ padding: `0 ${theme.spacing(4)}` })}>\n                            <Grid item xs={12}>\n                                <Typography css={theme => ({ fontSize: theme.fontSize.large })}>\n                                    {part.title}\n                                </Typography>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TaskFieldContainer label=\"Шаблон\">\n                                    {\" \"}\n                                    <Grid item xs={3}>\n                                        <SelectField placeholder={\"Выбрать шаблон\"} fullWidth />\n                                    </Grid>\n                                    ,\n                                </TaskFieldContainer>\n                            </Grid>\n                        </Grid>\n                    </SelectableBlockWrapper>\n                ))}\n            </Grid>\n        </SectionLayout>\n    );\n};\n\ninterface ITaskFieldProps {\n    label: string;\n}\n\nconst TaskFieldContainer: React.FC<ITaskFieldProps> = ({ label, children }) => {\n    return (\n        <Grid\n            container\n            direction={\"row\"}\n            spacing={2}\n            alignItems={\"flex-start\"}\n            css={theme => ({ marginTop: theme.spacing() })}\n        >\n            <Grid item xs={2} css={theme => ({ marginTop: theme.spacing(2) })}>\n                <Typography component={\"span\"}>{label}</Typography>\n            </Grid>\n            <Grid item xs>\n                {children}\n            </Grid>\n        </Grid>\n    );\n};\n","export * from \"./TaskInfo\";\nexport * from \"./CreateTask\";\nexport * from \"./EditTask\";\n"],"sourceRoot":""}
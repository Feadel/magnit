{"version":3,"sources":["containers/templates/TemplateList.tsx","containers/templates/CreateTemplate.tsx","containers/templates/EditTemplate.tsx","containers/templates/index.ts"],"names":["columns","key","sortable","label","TemplateList","context","useContext","AppContext","_useState","useState","_useState2","Object","slicedToArray","rows","setRows","_useState3","redirect","to","_useState4","setRedirect","useEffect","getTemplates","courier","then","response","templates","map","template","objectSpread","createdAt","getFriendlyDate","Date","updatedAt","catch","console","error","empty","length","core_browser_esm","section_layout","es","concat","noThrow","section_title","title","Grid","item","hidden","dist","component","Link","variant","scheme","icons_dist","Typography","list","actionName","button","description","Paper","square","css","theme","margin","spacing","boxShadow","colors","lightGray","container","direction","marginTop","padding","xs","placeholder","fullWidth","borderRadius","radius","background","white","border","transition","cursor",":hover, :active","primary","div",":before, :after","input","data","onRowClick","row","_","isObject","has","get","CreateTemplate","setTemplate","setError","_useState5","_useState6","open","setOpen","_useState7","_useState8","_onAddAsset","asyncToGenerator","regenerator_default","a","mark","_callee","file","wrap","_context","prev","next","abrupt","uploadFile","filename","process","stop","apply","this","arguments","onClick","createTemplate","maxWidth","maxTemplateWidth","position","opacity","pointerEvents","template_editor_dist","main","onChange","cloneDeep","onAddAsset","_x","snackbar","onClose","event","reason","setTimeout","messages","success","EditTemplate","_ref","templateId","_onDeleteAsset","_callee2","_context2","deleteFile","getTemplate","updateTemplate","isEmpty","initialState","onDeleteAsset","_x2","__webpack_require__","d","__webpack_exports__","TemplateList_TemplateList","CreateTemplate_CreateTemplate","EditTemplate_EditTemplate"],"mappings":"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","file":"static/js/2.86ab83c9.chunk.js","sourcesContent":["/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport * as React from \"react\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { SectionTitle } from \"components/section-title\";\nimport { SectionLayout } from \"components/section-layout\";\nimport { Link, Redirect } from \"@reach/router\";\nimport { Button, IColumn, InputField, TableWrapper } from \"@magnit/components\";\nimport { AddIcon } from \"@magnit/icons\";\nimport { EmptyList } from \"components/list\";\nimport { getTemplates } from \"services/api/templates\";\nimport { AppContext } from \"context\";\nimport { Grid, Paper, Typography } from \"@material-ui/core\";\nimport _ from \"lodash\";\nimport { getFriendlyDate } from \"@magnit/services\";\n\nconst columns: IColumn[] = [\n    { key: \"title\", sortable: true, label: \"Название шаблона\" },\n    { key: \"description\", label: \"Описание\" },\n    { key: \"createdAt\", label: \"Дата создания\" },\n    { key: \"updatedAt\", label: \"Дата редактирования\" },\n];\n\nexport const TemplateList: React.FC = () => {\n    const context = useContext(AppContext);\n    const [rows, setRows] = useState<object[]>([]);\n    const [redirect, setRedirect] = useState({ redirect: false, to: \"\" });\n\n    useEffect(() => {\n        getTemplates(context.courier)\n            .then(response => {\n                response.templates = response.templates.map(template => {\n                    return {\n                        ...template,\n                        createdAt: getFriendlyDate(new Date(template.createdAt)),\n                        updatedAt: getFriendlyDate(new Date(template.updatedAt)),\n                    };\n                });\n                setRows(response.templates);\n            })\n            .catch(console.error);\n    }, [context.courier]);\n\n    function onRowClick(row?: object) {\n        if (!_.isObject(row) || !_.has(row, \"id\")) {\n            return;\n        }\n        setRedirect({ redirect: true, to: _.get(row, \"id\") });\n    }\n\n    const empty = !rows.length;\n\n    return (\n        <SectionLayout>\n            {redirect.redirect && <Redirect to={`templates/edit/${redirect.to}`} noThrow />}\n            <SectionTitle title=\"Список шаблонов\">\n                <Grid item hidden={empty}>\n                    <Button component={Link} to=\"create\" variant=\"contained\" scheme=\"blue\">\n                        <AddIcon />\n                        <Typography>Создать шаблон</Typography>\n                    </Button>\n                </Grid>\n            </SectionTitle>\n            {empty && (\n                <EmptyList\n                    title={\"Шаблонов нет\"}\n                    actionName={\"Создать шаблон\"}\n                    button={\n                        <Button component={Link} to=\"create\" scheme=\"blue\">\n                            <AddIcon />\n                            <Typography>Создать шаблон</Typography>\n                        </Button>\n                    }\n                    description={\"Для создания шаблона нажмите кнопку\"}\n                />\n            )}\n            {!empty && (\n                <Paper\n                    square={true}\n                    css={theme => ({\n                        margin: theme.spacing(3),\n                        boxShadow: `0 0 ${theme.spacing(2)} ${theme.colors.lightGray} !important`,\n                    })}\n                >\n                    <Grid\n                        container\n                        direction=\"row\"\n                        css={theme => ({ marginTop: theme.spacing(2) })}\n                    >\n                        <Grid\n                            container\n                            direction=\"column\"\n                            css={theme => ({ padding: theme.spacing(3) })}\n                        >\n                            <Grid container direction=\"row\" spacing={2}>\n                                <Grid item xs>\n                                    <InputField\n                                        placeholder=\"Поиск ...\"\n                                        fullWidth\n                                        css={theme => ({\n                                            borderRadius: theme.radius(5),\n                                            background: theme.colors.white,\n                                            border: `1px solid ${theme.colors.lightGray}`,\n                                            transition: \"border 0.25s ease-in-out\",\n                                            cursor: \"pointer\",\n                                            \":hover, :active\": {\n                                                border: `1px solid ${theme.colors.primary}`,\n                                            },\n                                            div: {\n                                                \":before, :after\": {\n                                                    border: \"none !important\",\n                                                },\n                                            },\n                                            input: {\n                                                padding: `${theme.spacing(2)} ${theme.spacing(4)}`,\n                                            },\n                                        })}\n                                    />\n                                </Grid>\n                            </Grid>\n                            <Grid item css={theme => ({ padding: theme.spacing(3) })}>\n                                <TableWrapper\n                                    columns={columns}\n                                    data={rows}\n                                    onRowClick={onRowClick}\n                                />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Paper>\n            )}\n        </SectionLayout>\n    );\n};\n","/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport * as React from \"react\";\nimport { useContext, useState } from \"react\";\nimport { SectionLayout } from \"components/section-layout\";\nimport { SectionTitle } from \"components/section-title\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { TemplateEditor } from \"@magnit/template-editor\";\nimport { Button } from \"@magnit/components\";\nimport { CheckIcon } from \"@magnit/icons\";\nimport { createTemplate } from \"services/api/templates\";\nimport { AppContext } from \"context\";\nimport { Snackbar } from \"components/snackbar\";\nimport { Redirect } from \"@reach/router\";\nimport _ from \"lodash\";\nimport { uploadFile } from \"../../services/api/assets\";\n\nexport const CreateTemplate: React.FC = () => {\n    const context = useContext(AppContext);\n    const [template, setTemplate] = useState<object>({});\n    const [error, setError] = useState(false); // success/error snackbar state\n    const [open, setOpen] = useState(false); // open/close snackbar\n    const [redirect, setRedirect] = useState(false);\n\n    function onTemplateChange(template: object) {\n        setTemplate(_.cloneDeep(template));\n    }\n\n    function onSnackbarClose(event?: React.SyntheticEvent, reason?: string) {\n        if (reason === \"clickaway\") {\n            return;\n        }\n        if (!error) {\n            setRedirect(true);\n        }\n        setOpen(false);\n        // wait till animation ends\n        setTimeout(() => setError(false), 100);\n    }\n\n    function onTemplateSave() {\n        createTemplate(context.courier, template)\n            .then(() => setOpen(true))\n            .catch(() => {\n                setOpen(true);\n                setError(true);\n            });\n    }\n\n    async function onAddAsset(file: File) {\n        return uploadFile(context.courier, file).then(response => ({\n            ...response,\n            filename: `${process.env.REACT_APP_BACKEND_URL}/${response.filename}`,\n        }));\n    }\n\n    return (\n        <SectionLayout>\n            {redirect && <Redirect to={\"/templates\"} noThrow />}\n            <SectionTitle title=\"Создание шаблона\">\n                <Grid item>\n                    <Button variant=\"contained\" scheme=\"blue\" onClick={onTemplateSave}>\n                        <CheckIcon />\n                        <Typography>Сохранить</Typography>\n                    </Button>\n                </Grid>\n            </SectionTitle>\n            <Grid\n                css={theme => ({\n                    maxWidth: theme.maxTemplateWidth,\n                    margin: theme.spacing(4),\n                    position: \"relative\",\n                    opacity: open ? 0.5 : 1,\n                    transition: \"opacity 0.3s ease-in-out\",\n                    pointerEvents: open ? \"none\" : \"initial\",\n                })}\n            >\n                <TemplateEditor\n                    css={theme => ({ background: theme.colors.main })}\n                    onChange={onTemplateChange}\n                    onAddAsset={onAddAsset}\n                />\n            </Grid>\n            <Snackbar\n                open={open}\n                error={error}\n                onClose={onSnackbarClose}\n                messages={{\n                    success: \"Шаблон успешно сохранён!\",\n                    error: \"Ошибка сохранения шаблона!\",\n                }}\n            />\n        </SectionLayout>\n    );\n};\n","/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport * as React from \"react\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { SectionLayout } from \"components/section-layout\";\nimport { SectionTitle } from \"components/section-title\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { ITemplate, TemplateEditor } from \"@magnit/template-editor\";\nimport { Button } from \"@magnit/components\";\nimport { CheckIcon } from \"@magnit/icons\";\nimport { deleteFile, getTemplate, updateTemplate, uploadFile } from \"services/api\";\nimport { AppContext } from \"context\";\nimport { Snackbar } from \"components/snackbar\";\nimport { Redirect } from \"@reach/router\";\nimport _ from \"lodash\";\n\ninterface IEditTemplateProps {\n    templateId: number;\n}\n\nexport const EditTemplate: React.FC<IEditTemplateProps> = ({ templateId }) => {\n    const context = useContext(AppContext);\n    const [template, setTemplate] = useState<object>({});\n    const [error, setError] = useState(false); // success/error snackbar state\n    const [open, setOpen] = useState(false); // open/close snackbar\n    const [redirect, setRedirect] = useState(false);\n\n    useEffect(() => {\n        getTemplate(context.courier, templateId)\n            .then(response => setTemplate(response.template))\n            .catch(console.error);\n    }, [context.courier, templateId]);\n\n    function onTemplateChange(template: object) {\n        setTemplate(_.cloneDeep(template));\n    }\n\n    function onSnackbarClose(event?: React.SyntheticEvent, reason?: string) {\n        if (reason === \"clickaway\") {\n            return;\n        }\n        if (!error) {\n            setRedirect(true);\n        }\n        setOpen(false);\n        // wait till animation ends\n        setTimeout(() => setError(false), 100);\n    }\n\n    function onTemplateSave() {\n        updateTemplate(context.courier, templateId, template)\n            .then(() => setOpen(true))\n            .catch(() => {\n                setOpen(true);\n                setError(true);\n            });\n    }\n\n    async function onAddAsset(file: File) {\n        return uploadFile(context.courier, file).then(response => ({\n            ...response,\n            filename: `${process.env.REACT_APP_BACKEND_URL}/${response.filename}`,\n        }));\n    }\n\n    async function onDeleteAsset(filename: string) {\n        return deleteFile(context.courier, filename);\n    }\n\n    return (\n        <SectionLayout>\n            {redirect && <Redirect to={\"/templates\"} noThrow />}\n            <SectionTitle title=\"Редактирование шаблона\">\n                <Grid item>\n                    <Button variant=\"contained\" scheme=\"blue\" onClick={onTemplateSave}>\n                        <CheckIcon />\n                        <Typography>Обновить</Typography>\n                    </Button>\n                </Grid>\n            </SectionTitle>\n            <Grid\n                css={theme => ({\n                    maxWidth: theme.maxTemplateWidth,\n                    margin: theme.spacing(4),\n                    position: \"relative\",\n                    opacity: open ? 0.5 : 1,\n                    transition: \"opacity 0.3s ease-in-out\",\n                    pointerEvents: open ? \"none\" : \"initial\",\n                })}\n            >\n                {!_.isEmpty(template) && (\n                    <TemplateEditor\n                        initialState={(template as unknown) as ITemplate}\n                        css={theme => ({ background: theme.colors.main })}\n                        onChange={onTemplateChange}\n                        onAddAsset={onAddAsset}\n                        onDeleteAsset={onDeleteAsset}\n                    />\n                )}\n            </Grid>\n            <Snackbar\n                open={open}\n                error={error}\n                onClose={onSnackbarClose}\n                messages={{\n                    success: \"Шаблон успешно обновлён!\",\n                    error: \"Ошибка обновления шаблона!\",\n                }}\n            />\n        </SectionLayout>\n    );\n};\n","export * from \"./TemplateList\";\nexport * from \"./CreateTemplate\";\nexport * from \"./EditTemplate\";\n"],"sourceRoot":""}
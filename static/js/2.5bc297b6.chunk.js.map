{"version":3,"sources":["components/section-title/SectionTitle.tsx","components/section-title/index.ts","components/section-layout/SectionLayout.tsx","components/section-layout/index.ts","components/snackbar/Snackbar.tsx","components/snackbar/index.ts","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","components/centered-section-item/CenteredSectionItem.tsx","components/list/EmptyList.tsx","components/list/index.ts","containers/templates/TemplateList.tsx","containers/templates/CreateTemplate.tsx","containers/templates/EditTemplate.tsx","containers/templates/index.ts"],"names":["SectionTitle","title","children","Grid","item","css","Paper","square","container","theme","paddingLeft","spacing","paddingRight","xs","Typography","variant","component","SectionLayout","direction","Snackbar","message","error","open","props","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","SnackbarContent","background","colors","red","green","boxShadow","Error","marginRight","CheckCircle","action","IconButton","key","color","onClick","Close","_objectWithoutProperties","source","excluded","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","CenteredSectionItem","EmptyList","button","justify","alignContent","marginBottom","align","black","fontWeight","fontSize","xLarge","secondary","larger","columns","sortable","label","TemplateList","context","useContext","AppContext","useState","rows","setRows","redirect","to","setRedirect","useEffect","getTemplates","courier","then","response","templates","map","template","createdAt","getFriendlyDate","Date","updatedAt","catch","console","empty","noThrow","hidden","Link","scheme","margin","lightGray","marginTop","padding","placeholder","fullWidth","borderRadius","radius","white","border","transition","cursor","primary","div","input","data","onRowClick","row","_","isObject","has","get","CreateTemplate","setTemplate","setError","ETerminals","EMPTY","snackbar","setSnackbar","file","a","uploadFile","filename","process","deleteFile","createTemplate","disabled","maxWidth","maxTemplateWidth","position","opacity","pointerEvents","main","onChange","cloneDeep","onAddAsset","onDeleteAsset","event","reason","setTimeout","EditTemplate","templateId","getTemplate","updateTemplate","isEmpty","initialState"],"mappings":"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","file":"static/js/2.5bc297b6.chunk.js","sourcesContent":["/** @jsx jsx */\n\nimport { css, jsx } from \"@emotion/core\";\nimport * as React from \"react\";\nimport { Grid, Paper, Typography } from \"@material-ui/core\";\n\ninterface ISectionTitleProps {\n    title: string;\n}\n\nexport const SectionTitle: React.FC<ISectionTitleProps> = ({ title, children }) => {\n    return (\n        <Grid\n            item\n            css={css`\n                height: var(--section-title-height);\n                box-shadow: 0 6px 20px rgba(220, 227, 235, 0.3);\n            `}\n        >\n            <Paper\n                square={true}\n                css={css`\n                    height: 100%;\n                    display: flex;\n                    align-items: center;\n                    box-shadow: none !important;\n                `}\n            >\n                <Grid\n                    container\n                    css={theme => ({\n                        paddingLeft: theme.spacing(4),\n                        paddingRight: theme.spacing(4),\n                    })}\n                >\n                    <Grid item xs>\n                        <Typography variant=\"h4\" component=\"div\">\n                            <span>{title}</span>\n                        </Typography>\n                    </Grid>\n                    {children}\n                </Grid>\n            </Paper>\n        </Grid>\n    );\n};\n","export * from \"./SectionTitle\";\n","/** @jsx jsx */\n\nimport { jsx, css } from \"@emotion/core\";\nimport * as React from \"react\";\nimport { Grid } from \"@material-ui/core\";\n\nexport const SectionLayout: React.FC = ({ children }) => {\n    return (\n        <Grid\n            container\n            direction=\"column\"\n            css={css`\n                width: 100%;\n                min-height: 100vh;\n            `}\n        >\n            {children}\n        </Grid>\n    );\n};\n","export * from \"./SectionLayout\";\n","/** @jsx jsx */\n\nimport * as React from \"react\";\nimport { IconButton, Snackbar as MaterialSnackbar, SnackbarContent } from \"@material-ui/core\";\nimport { css, jsx } from \"@emotion/core\";\nimport {\n    CheckCircle as CheckCircleIcon,\n    Close as CloseIcon,\n    Error as ErrorIcon,\n} from \"@material-ui/icons\";\n\ninterface ISnackbarProps {\n    message: string;\n    open: boolean;\n    error: boolean;\n\n    onClose?(event?: React.SyntheticEvent, reason?: string): void;\n}\n\nexport const Snackbar: React.FC<ISnackbarProps> = ({ message, error, open, ...props }) => {\n    return (\n        <MaterialSnackbar\n            anchorOrigin={{\n                vertical: \"bottom\",\n                horizontal: \"right\",\n            }}\n            open={open}\n            autoHideDuration={2500}\n            onClose={props.onClose}\n        >\n            <SnackbarContent\n                css={theme => ({\n                    background: error ? theme.colors.red : theme.colors.green,\n                    boxShadow: `0 4px 8px ${error ? theme.colors.red : theme.colors.green}50`,\n                })}\n                message={\n                    <span\n                        css={css`\n                            display: flex;\n                            align-items: center;\n                        `}\n                    >\n                        {error ? (\n                            <ErrorIcon css={theme => ({ marginRight: theme.spacing(1) })} />\n                        ) : (\n                            <CheckCircleIcon css={theme => ({ marginRight: theme.spacing(1) })} />\n                        )}\n                        {message}\n                    </span>\n                }\n                action={[\n                    <IconButton key=\"close\" color=\"inherit\" onClick={props.onClose}>\n                        <CloseIcon />\n                    </IconButton>,\n                ]}\n            />\n        </MaterialSnackbar>\n    );\n};\n","export * from \"./Snackbar\";\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","/** @jsx jsx */\n\nimport { css, jsx } from \"@emotion/core\";\nimport * as React from \"react\";\nimport { Grid } from \"@material-ui/core\";\n\nexport const CenteredSectionItem: React.FC = ({ children }) => {\n    return (\n        <Grid\n            item\n            xs\n            css={css`\n                display: flex;\n                flex-direction: column;\n                justify-content: center;\n                align-items: center;\n            `}\n        >\n            {children}\n        </Grid>\n    );\n};\n","/** @jsx jsx */\n\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { jsx } from \"@emotion/core\";\nimport { CenteredSectionItem } from \"components/centered-section-item\";\nimport * as React from \"react\";\n\ninterface IEmptyListProps {\n    title: string;\n    button: React.ReactNode;\n}\n\nexport const EmptyList: React.FC<IEmptyListProps> = ({ title, button, children }) => {\n    return (\n        <CenteredSectionItem>\n            <Grid container justify=\"center\" alignContent=\"center\" direction=\"column\">\n                <Grid item css={theme => ({ marginBottom: theme.spacing(3) })}>\n                    <Typography\n                        component=\"div\"\n                        align=\"center\"\n                        css={theme => ({\n                            color: theme.colors.black,\n                            fontWeight: 500,\n                            fontSize: theme.fontSize.xLarge,\n                        })}\n                    >\n                        <span>{title}</span>\n                    </Typography>\n                </Grid>\n                <Grid item css={theme => ({ marginBottom: theme.spacing(3) })}>\n                    <Typography\n                        component=\"div\"\n                        align=\"center\"\n                        css={theme => ({\n                            color: theme.colors.secondary,\n                            fontSize: theme.colors.larger,\n                        })}\n                    >\n                        {children}\n                    </Typography>\n                </Grid>\n                <Grid item>\n                    <Grid container justify=\"center\" alignContent=\"center\">\n                        <Grid item>{button}</Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </CenteredSectionItem>\n    );\n};\n","export * from \"./EmptyList\";\n","/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport * as React from \"react\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { SectionTitle } from \"components/section-title\";\nimport { SectionLayout } from \"components/section-layout\";\nimport { Link, Redirect } from \"@reach/router\";\nimport { Button, IColumn, InputField, TableWrapper } from \"@magnit/components\";\nimport { AddIcon } from \"@magnit/icons\";\nimport { EmptyList } from \"components/list\";\nimport { getTemplates } from \"services/api/templates\";\nimport { AppContext } from \"context\";\nimport { Grid, Paper, Typography } from \"@material-ui/core\";\nimport _ from \"lodash\";\nimport { getFriendlyDate } from \"@magnit/services\";\n\nconst columns: IColumn[] = [\n    { key: \"title\", sortable: true, label: \"Название шаблона\" },\n    { key: \"description\", label: \"Описание\" },\n    { key: \"createdAt\", label: \"Дата создания\" },\n    { key: \"updatedAt\", label: \"Дата редактирования\" },\n];\n\nexport const TemplateList: React.FC = () => {\n    const context = useContext(AppContext);\n    const [rows, setRows] = useState<object[]>([]);\n    const [redirect, setRedirect] = useState({ redirect: false, to: \"\" });\n\n    useEffect(() => {\n        getTemplates(context.courier)\n            .then(response => {\n                response.templates = response.templates.map(template => {\n                    return {\n                        ...template,\n                        createdAt: getFriendlyDate(new Date(template.createdAt!), true),\n                        updatedAt: getFriendlyDate(new Date(template.updatedAt!), true),\n                    };\n                });\n                setRows(response.templates);\n            })\n            .catch(console.error);\n    }, [context.courier]);\n\n    function onRowClick(row?: object) {\n        if (!_.isObject(row) || !_.has(row, \"id\")) {\n            return;\n        }\n        setRedirect({ redirect: true, to: _.get(row, \"id\") });\n    }\n\n    const empty = !rows.length;\n\n    return (\n        <SectionLayout>\n            {redirect.redirect && <Redirect to={`templates/edit/${redirect.to}`} noThrow />}\n            <SectionTitle title=\"Список шаблонов\">\n                <Grid item hidden={empty}>\n                    <Button component={Link} to=\"create\" variant=\"contained\" scheme=\"blue\">\n                        <AddIcon />\n                        <Typography>Создать шаблон</Typography>\n                    </Button>\n                </Grid>\n            </SectionTitle>\n            {empty && (\n                <EmptyList\n                    title=\"Шаблонов нет\"\n                    button={\n                        <Button component={Link} to=\"create\" scheme=\"blue\">\n                            <AddIcon />\n                            <Typography>Создать шаблон</Typography>\n                        </Button>\n                    }\n                >\n                    <div>Для создания шаблона нажмите кнопку</div>\n                    <div>Создать шаблон</div>\n                </EmptyList>\n            )}\n            {!empty && (\n                <Paper\n                    square={true}\n                    css={theme => ({\n                        margin: theme.spacing(3),\n                        boxShadow: `0 0 ${theme.spacing(2)} ${theme.colors.lightGray} !important`,\n                    })}\n                >\n                    <Grid\n                        container\n                        direction=\"row\"\n                        css={theme => ({ marginTop: theme.spacing(2) })}\n                    >\n                        <Grid\n                            container\n                            direction=\"column\"\n                            css={theme => ({ padding: theme.spacing(3) })}\n                        >\n                            <Grid container direction=\"row\" spacing={2}>\n                                <Grid item xs>\n                                    <InputField\n                                        placeholder=\"Поиск ...\"\n                                        fullWidth\n                                        css={theme => ({\n                                            borderRadius: theme.radius(5),\n                                            background: theme.colors.white,\n                                            border: `1px solid ${theme.colors.lightGray}`,\n                                            transition: \"border 0.25s ease-in-out\",\n                                            cursor: \"pointer\",\n                                            \":hover, :active\": {\n                                                border: `1px solid ${theme.colors.primary}`,\n                                            },\n                                            div: {\n                                                \":before, :after\": {\n                                                    border: \"none !important\",\n                                                },\n                                            },\n                                            input: {\n                                                padding: `${theme.spacing(2)} ${theme.spacing(4)}`,\n                                            },\n                                        })}\n                                    />\n                                </Grid>\n                            </Grid>\n                            <Grid item css={theme => ({ padding: theme.spacing(3) })}>\n                                <TableWrapper\n                                    columns={columns}\n                                    data={rows}\n                                    onRowClick={onRowClick}\n                                />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Paper>\n            )}\n        </SectionLayout>\n    );\n};\n","/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { Button } from \"@magnit/components\";\nimport { CheckIcon } from \"@magnit/icons\";\nimport { ETerminals } from \"@magnit/services\";\nimport { TemplateEditor } from \"@magnit/template-editor\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { SectionLayout } from \"components/section-layout\";\nimport { SectionTitle } from \"components/section-title\";\nimport { Snackbar } from \"components/snackbar\";\nimport { AppContext } from \"context\";\nimport _ from \"lodash\";\nimport * as React from \"react\";\nimport { useContext, useState } from \"react\";\nimport { deleteFile, uploadFile } from \"services/api/assets\";\nimport { createTemplate } from \"services/api/templates\";\n\nexport const CreateTemplate: React.FC = () => {\n    const context = useContext(AppContext);\n    const [template, setTemplate] = useState<object>({});\n    const [error, setError] = useState(false); // success/error snackbar state\n    const [snackbar, setSnackbar] = useState({\n        open: false,\n        message: ETerminals.EMPTY as string,\n    }); // open/close snackbar\n\n    function onTemplateChange(template: object) {\n        setTemplate(_.cloneDeep(template));\n    }\n\n    function onSnackbarClose(event?: React.SyntheticEvent, reason?: string) {\n        if (reason === \"clickaway\") {\n            return;\n        }\n        setSnackbar({ open: false, message: ETerminals.EMPTY });\n        // wait till animation ends\n        setTimeout(() => setError(false), 100);\n    }\n\n    function onTemplateSave() {\n        createTemplate(context.courier, template)\n            .then(() => setSnackbar({ open: true, message: \"Шаблон успешно сохранён!\" }))\n            .catch(() => {\n                setSnackbar({ open: true, message: \"Ошибка сохранения шаблона!\" });\n                setError(true);\n            });\n    }\n\n    async function onAddAsset(file: File) {\n        return uploadFile(context.courier, file).then(response => ({\n            ...response,\n            filename: `${process.env.REACT_APP_BACKEND_URL}/${response.filename}`,\n        }));\n    }\n\n    async function onDeleteAsset(filename: string) {\n        return deleteFile(context.courier, filename);\n    }\n\n    return (\n        <SectionLayout>\n            <SectionTitle title=\"Создание шаблона\">\n                <Grid item>\n                    <Button\n                        variant=\"contained\"\n                        scheme=\"green\"\n                        onClick={onTemplateSave}\n                        disabled={snackbar.open}\n                    >\n                        <CheckIcon />\n                        <Typography>Сохранить</Typography>\n                    </Button>\n                </Grid>\n            </SectionTitle>\n            <Grid\n                css={theme => ({\n                    maxWidth: theme.maxTemplateWidth,\n                    margin: theme.spacing(4),\n                    position: \"relative\",\n                    opacity: snackbar.open ? 0.5 : 1,\n                    transition: \"opacity 0.3s ease-in-out\",\n                    pointerEvents: snackbar.open ? \"none\" : \"initial\",\n                })}\n            >\n                <TemplateEditor\n                    css={theme => ({ background: theme.colors.main })}\n                    onChange={onTemplateChange}\n                    onAddAsset={onAddAsset}\n                    onDeleteAsset={onDeleteAsset}\n                />\n            </Grid>\n            <Snackbar\n                open={snackbar.open}\n                error={error}\n                onClose={onSnackbarClose}\n                message={snackbar.message}\n            />\n        </SectionLayout>\n    );\n};\n","/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { Button } from \"@magnit/components\";\nimport { CheckIcon } from \"@magnit/icons\";\nimport { ETerminals } from \"@magnit/services\";\nimport { ITemplate, TemplateEditor } from \"@magnit/template-editor\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { SectionLayout } from \"components/section-layout\";\nimport { SectionTitle } from \"components/section-title\";\nimport { Snackbar } from \"components/snackbar\";\nimport { AppContext } from \"context\";\nimport _ from \"lodash\";\nimport * as React from \"react\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { deleteFile, getTemplate, updateTemplate, uploadFile } from \"services/api\";\n\ninterface IEditTemplateProps {\n    templateId: number;\n}\n\nexport const EditTemplate: React.FC<IEditTemplateProps> = ({ templateId }) => {\n    const context = useContext(AppContext);\n    const [template, setTemplate] = useState<object>({});\n    const [error, setError] = useState(false); // success/error snackbar state\n    const [snackbar, setSnackbar] = useState({\n        open: false,\n        message: ETerminals.EMPTY as string,\n    }); // open/close snackbar\n\n    useEffect(() => {\n        getTemplate(context.courier, templateId)\n            .then(response => setTemplate(response.template))\n            .catch(console.error);\n    }, [context.courier, templateId]);\n\n    function onTemplateChange(template: object) {\n        setTemplate(_.cloneDeep(template));\n    }\n\n    function onSnackbarClose(event?: React.SyntheticEvent, reason?: string) {\n        if (reason === \"clickaway\") {\n            return;\n        }\n        setSnackbar({ open: false, message: ETerminals.EMPTY });\n        // wait till animation ends\n        setTimeout(() => setError(false), 100);\n    }\n\n    function onTemplateSave() {\n        updateTemplate(context.courier, templateId, template)\n            .then(() => setSnackbar({ open: true, message: \"Шаблон успешно обновлён!\" }))\n            .catch(() => {\n                setSnackbar({ open: true, message: \"Ошибка обновления шаблона!\" });\n                setError(true);\n            });\n    }\n\n    async function onAddAsset(file: File) {\n        return uploadFile(context.courier, file).then(response => ({\n            ...response,\n            filename: `${process.env.REACT_APP_BACKEND_URL}/${response.filename}`,\n        }));\n    }\n\n    async function onDeleteAsset(filename: string) {\n        return deleteFile(context.courier, filename);\n    }\n\n    return (\n        <SectionLayout>\n            <SectionTitle title=\"Редактирование шаблона\">\n                <Grid item>\n                    <Button\n                        variant=\"contained\"\n                        scheme=\"blue\"\n                        onClick={onTemplateSave}\n                        disabled={snackbar.open}\n                    >\n                        <CheckIcon />\n                        <Typography>Обновить</Typography>\n                    </Button>\n                </Grid>\n            </SectionTitle>\n            <Grid\n                css={theme => ({\n                    maxWidth: theme.maxTemplateWidth,\n                    margin: theme.spacing(4),\n                    position: \"relative\",\n                    transition: \"opacity 0.3s ease-in-out\",\n                })}\n            >\n                {!_.isEmpty(template) && (\n                    <TemplateEditor\n                        initialState={(template as unknown) as ITemplate}\n                        css={theme => ({ background: theme.colors.main })}\n                        onChange={onTemplateChange}\n                        onAddAsset={onAddAsset}\n                        onDeleteAsset={onDeleteAsset}\n                    />\n                )}\n            </Grid>\n            <Snackbar\n                open={snackbar.open}\n                error={error}\n                onClose={onSnackbarClose}\n                message={snackbar.message}\n            />\n        </SectionLayout>\n    );\n};\n","export * from \"./TemplateList\";\nexport * from \"./CreateTemplate\";\nexport * from \"./EditTemplate\";\n"],"sourceRoot":""}
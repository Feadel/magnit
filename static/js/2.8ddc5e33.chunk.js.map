{"version":3,"sources":["components/section-layout/SectionLayout.tsx","components/section-layout/index.ts","components/section-title/SectionTitle.tsx","components/section-title/index.ts","components/centered-section-item/CenteredSectionItem.tsx","components/list/EmptyList.tsx","components/list/index.ts","containers/templates/TemplateList.tsx","containers/templates/CreateTemplate.tsx","containers/templates/EditTemplate.tsx","containers/templates/index.ts"],"names":["SectionLayout","children","Grid","container","direction","css","width","minHeight","displayName","SectionTitle","title","item","height","boxShadow","Paper","square","display","alignItems","theme","paddingLeft","spacing","paddingRight","xs","Typography","variant","component","CenteredSectionItem","flexDirection","justifyContent","EmptyList","button","justify","alignContent","marginBottom","align","color","colors","black","fontWeight","fontSize","xLarge","secondary","larger","columns","key","label","sortable","TemplateList","context","useContext","AppContext","useState","rows","setRows","redirect","to","setRedirect","useEffect","getTemplates","courier","then","response","templates","map","template","createdAt","getFriendlyDate","Date","updatedAt","catch","console","error","empty","length","noThrow","hidden","Link","scheme","margin","lightGray","marginTop","padding","placeholder","fullWidth","borderRadius","radius","background","white","border","transition","cursor","primary","div","input","data","onRowClick","row","_","isObject","has","get","CreateTemplate","setTemplate","setError","open","message","snackbar","setSnackbar","file","a","uploadFile","filename","process","deleteFile","onClick","createTemplate","disabled","maxWidth","maxTemplateWidth","position","opacity","pointerEvents","main","onChange","cloneDeep","onAddAsset","onDeleteAsset","onClose","event","reason","setTimeout","EditTemplate","templateId","getTemplate","updateTemplate","isEmpty"],"mappings":"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","file":"static/js/2.8ddc5e33.chunk.js","sourcesContent":["/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { Grid } from \"@material-ui/core\";\nimport * as React from \"react\";\n\nexport const SectionLayout: React.FC = ({ children }) => {\n    return (\n        <Grid\n            container\n            direction=\"column\"\n            css={{\n                width: \"100%\",\n                minHeight: \"100vh\",\n            }}\n        >\n            {children}\n        </Grid>\n    );\n};\n\nSectionLayout.displayName = \"SectionLayout\";\n","export * from \"./SectionLayout\";\n","/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { Grid, Paper, Typography } from \"@material-ui/core\";\nimport * as React from \"react\";\n\ninterface ISectionTitleProps {\n    title: string;\n}\n\nexport const SectionTitle: React.FC<ISectionTitleProps> = ({ title, children }) => {\n    return (\n        <Grid\n            item\n            css={{\n                height: \"var(--section-title-height)\",\n                boxShadow: \"0 6px 20px rgba(220, 227, 235, 0.3)\",\n            }}\n        >\n            <Paper\n                square={true}\n                css={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    boxShadow: \"none !important\",\n                }}\n            >\n                <Grid\n                    container\n                    css={theme => ({\n                        paddingLeft: theme.spacing(4),\n                        paddingRight: theme.spacing(4),\n                    })}\n                >\n                    <Grid item xs>\n                        <Typography variant=\"h4\" component=\"div\">\n                            <span>{title}</span>\n                        </Typography>\n                    </Grid>\n                    {children}\n                </Grid>\n            </Paper>\n        </Grid>\n    );\n};\n\nSectionTitle.displayName = \"SectionTitle\";\n","export * from \"./SectionTitle\";\n","/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { Grid } from \"@material-ui/core\";\nimport * as React from \"react\";\n\nexport const CenteredSectionItem: React.FC = ({ children }) => {\n    return (\n        <Grid\n            item\n            xs\n            css={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n            }}\n        >\n            {children}\n        </Grid>\n    );\n};\n\nCenteredSectionItem.displayName = \"CenteredSectionItem\";\n","/** @jsx jsx */\n\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { jsx } from \"@emotion/core\";\nimport { CenteredSectionItem } from \"components/centered-section-item\";\nimport * as React from \"react\";\n\ninterface IEmptyListProps {\n    title: string;\n    button?: React.ReactNode;\n}\n\nexport const EmptyList: React.FC<IEmptyListProps> = ({ title, button, children }) => {\n    return (\n        <CenteredSectionItem>\n            <Grid container justify=\"center\" alignContent=\"center\" direction=\"column\">\n                <Grid item css={theme => ({ marginBottom: theme.spacing(3) })}>\n                    <Typography\n                        component=\"div\"\n                        align=\"center\"\n                        css={theme => ({\n                            color: theme.colors.black,\n                            fontWeight: 500,\n                            fontSize: theme.fontSize.xLarge,\n                        })}\n                    >\n                        <span>{title}</span>\n                    </Typography>\n                </Grid>\n                <Grid item css={theme => ({ marginBottom: theme.spacing(3) })}>\n                    <Typography\n                        component=\"div\"\n                        align=\"center\"\n                        css={theme => ({\n                            color: theme.colors.secondary,\n                            fontSize: theme.colors.larger,\n                        })}\n                    >\n                        {children}\n                    </Typography>\n                </Grid>\n                <Grid item>\n                    <Grid container justify=\"center\" alignContent=\"center\">\n                        <Grid item>{button}</Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </CenteredSectionItem>\n    );\n};\n\nEmptyList.displayName = \"EmptyList\";\n","export * from \"./EmptyList\";\n","/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { Button, IColumn, InputField, TableWrapper } from \"@magnit/components\";\nimport { AddIcon } from \"@magnit/icons\";\nimport { getFriendlyDate } from \"@magnit/services\";\nimport { Grid, Paper, Typography } from \"@material-ui/core\";\nimport { Link, Redirect } from \"@reach/router\";\nimport { EmptyList } from \"components/list\";\nimport { SectionLayout } from \"components/section-layout\";\nimport { SectionTitle } from \"components/section-title\";\nimport { AppContext } from \"context\";\nimport _ from \"lodash\";\nimport * as React from \"react\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { getTemplates } from \"services/api/templates\";\n\nconst columns: IColumn[] = [\n    { key: \"title\", label: \"Название шаблона\", sortable: true },\n    { key: \"description\", label: \"Описание\", sortable: true },\n    { key: \"createdAt\", label: \"Дата создания\", sortable: true },\n    { key: \"updatedAt\", label: \"Дата редактирования\", sortable: true },\n];\n\nexport const TemplateList: React.FC = () => {\n    const context = useContext(AppContext);\n    const [rows, setRows] = useState<object[]>([]);\n    const [redirect, setRedirect] = useState({ redirect: false, to: \"\" });\n\n    useEffect(() => {\n        getTemplates(context.courier)\n            .then(response => {\n                response.templates = response.templates.map(template => {\n                    return {\n                        ...template,\n                        createdAt: getFriendlyDate(new Date(template.createdAt!), true),\n                        updatedAt: getFriendlyDate(new Date(template.updatedAt!), true),\n                    };\n                });\n                setRows(response.templates);\n            })\n            .catch(console.error);\n    }, [context.courier]);\n\n    function onRowClick(row?: object) {\n        if (!_.isObject(row) || !_.has(row, \"id\")) {\n            return;\n        }\n        setRedirect({ redirect: true, to: _.get(row, \"id\") });\n    }\n\n    const empty = !rows.length;\n\n    return (\n        <SectionLayout>\n            {redirect.redirect && <Redirect to={`templates/edit/${redirect.to}`} noThrow />}\n            <SectionTitle title=\"Список шаблонов\">\n                <Grid item hidden={empty}>\n                    <Button component={Link} to=\"create\" variant=\"contained\" scheme=\"blue\">\n                        <AddIcon />\n                        <Typography>Создать шаблон</Typography>\n                    </Button>\n                </Grid>\n            </SectionTitle>\n            {empty && (\n                <EmptyList\n                    title=\"Шаблонов нет\"\n                    button={\n                        <Button component={Link} to=\"create\" scheme=\"blue\">\n                            <AddIcon />\n                            <Typography>Создать шаблон</Typography>\n                        </Button>\n                    }\n                >\n                    <div>Для создания шаблона нажмите кнопку</div>\n                    <div>Создать шаблон</div>\n                </EmptyList>\n            )}\n            {!empty && (\n                <Paper\n                    square={true}\n                    css={theme => ({\n                        margin: theme.spacing(3),\n                        boxShadow: `0 0 ${theme.spacing(2)} ${theme.colors.lightGray} !important`,\n                    })}\n                >\n                    <Grid\n                        container\n                        direction=\"row\"\n                        css={theme => ({ marginTop: theme.spacing(2) })}\n                    >\n                        <Grid\n                            container\n                            direction=\"column\"\n                            css={theme => ({ padding: theme.spacing(3) })}\n                        >\n                            <Grid container direction=\"row\" spacing={2}>\n                                <Grid item xs>\n                                    <InputField\n                                        placeholder=\"Поиск ...\"\n                                        fullWidth\n                                        css={theme => ({\n                                            borderRadius: theme.radius(5),\n                                            background: theme.colors.white,\n                                            border: `1px solid ${theme.colors.lightGray}`,\n                                            transition: \"border 0.25s ease-in-out\",\n                                            cursor: \"pointer\",\n                                            \":hover, :active\": {\n                                                border: `1px solid ${theme.colors.primary}`,\n                                            },\n                                            div: {\n                                                \":before, :after\": {\n                                                    border: \"none !important\",\n                                                },\n                                            },\n                                            input: {\n                                                padding: `${theme.spacing(2)} ${theme.spacing(4)}`,\n                                            },\n                                        })}\n                                    />\n                                </Grid>\n                            </Grid>\n                            <Grid item css={theme => ({ padding: theme.spacing(3) })}>\n                                <TableWrapper\n                                    columns={columns}\n                                    data={rows}\n                                    onRowClick={onRowClick}\n                                />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Paper>\n            )}\n        </SectionLayout>\n    );\n};\n","/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { Button } from \"@magnit/components\";\nimport { CheckIcon } from \"@magnit/icons\";\nimport { TemplateEditor } from \"@magnit/template-editor\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { SectionLayout } from \"components/section-layout\";\nimport { SectionTitle } from \"components/section-title\";\nimport { Snackbar } from \"components/snackbar\";\nimport { AppContext } from \"context\";\nimport _ from \"lodash\";\nimport * as React from \"react\";\nimport { useContext, useState } from \"react\";\nimport { deleteFile, uploadFile } from \"services/api/assets\";\nimport { createTemplate } from \"services/api/templates\";\n\nexport const CreateTemplate: React.FC = () => {\n    const context = useContext(AppContext);\n    const [template, setTemplate] = useState<object>({});\n    const [error, setError] = useState(false); // success/error snackbar state\n    const [snackbar, setSnackbar] = useState({\n        open: false,\n        message: \"\",\n    }); // open/close snackbar\n\n    function onTemplateChange(template: object) {\n        setTemplate(_.cloneDeep(template));\n    }\n\n    function onSnackbarClose(event?: React.SyntheticEvent, reason?: string) {\n        if (reason === \"clickaway\") {\n            return;\n        }\n        setSnackbar({ open: false, message: \"\" });\n        // wait till animation ends\n        setTimeout(() => setError(false), 100);\n    }\n\n    function onTemplateSave() {\n        createTemplate(context.courier, template)\n            .then(() => setSnackbar({ open: true, message: \"Шаблон успешно сохранён!\" }))\n            .catch(() => {\n                setSnackbar({ open: true, message: \"Ошибка сохранения шаблона!\" });\n                setError(true);\n            });\n    }\n\n    async function onAddAsset(file: File) {\n        return uploadFile(context.courier, file).then(response => ({\n            ...response,\n            filename: `${process.env.REACT_APP_BACKEND_URL}/${response.filename}`,\n        }));\n    }\n\n    async function onDeleteAsset(filename: string) {\n        return deleteFile(context.courier, filename);\n    }\n\n    return (\n        <SectionLayout>\n            <SectionTitle title=\"Создание шаблона\">\n                <Grid item>\n                    <Button\n                        variant=\"contained\"\n                        scheme=\"green\"\n                        onClick={onTemplateSave}\n                        disabled={snackbar.open}\n                    >\n                        <CheckIcon />\n                        <Typography>Сохранить</Typography>\n                    </Button>\n                </Grid>\n            </SectionTitle>\n            <Grid\n                css={theme => ({\n                    maxWidth: theme.maxTemplateWidth,\n                    margin: theme.spacing(4),\n                    position: \"relative\",\n                    opacity: snackbar.open ? 0.5 : 1,\n                    transition: \"opacity 0.3s ease-in-out\",\n                    pointerEvents: snackbar.open ? \"none\" : \"initial\",\n                })}\n            >\n                <TemplateEditor\n                    css={theme => ({ background: theme.colors.main })}\n                    onChange={onTemplateChange}\n                    onAddAsset={onAddAsset}\n                    onDeleteAsset={onDeleteAsset}\n                />\n            </Grid>\n            <Snackbar\n                open={snackbar.open}\n                error={error}\n                onClose={onSnackbarClose}\n                message={snackbar.message}\n            />\n        </SectionLayout>\n    );\n};\n","/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { Button } from \"@magnit/components\";\nimport { ITemplate } from \"@magnit/entities\";\nimport { CheckIcon } from \"@magnit/icons\";\nimport { TemplateEditor } from \"@magnit/template-editor\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { SectionLayout } from \"components/section-layout\";\nimport { SectionTitle } from \"components/section-title\";\nimport { Snackbar } from \"components/snackbar\";\nimport { AppContext } from \"context\";\nimport _ from \"lodash\";\nimport * as React from \"react\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { deleteFile, getTemplate, updateTemplate, uploadFile } from \"services/api\";\n\ninterface IEditTemplateProps {\n    templateId: number;\n}\n\nexport const EditTemplate: React.FC<IEditTemplateProps> = ({ templateId }) => {\n    const context = useContext(AppContext);\n    const [template, setTemplate] = useState<object>({});\n    const [error, setError] = useState(false); // success/error snackbar state\n    const [snackbar, setSnackbar] = useState({\n        open: false,\n        message: \"\",\n    }); // open/close snackbar\n\n    useEffect(() => {\n        getTemplate(context.courier, templateId)\n            .then(response => setTemplate(response.template))\n            .catch(console.error);\n    }, [context.courier, templateId]);\n\n    function onTemplateChange(template: object) {\n        setTemplate(_.cloneDeep(template));\n    }\n\n    function onSnackbarClose(event?: React.SyntheticEvent, reason?: string) {\n        if (reason === \"clickaway\") {\n            return;\n        }\n        setSnackbar({ open: false, message: \"\" });\n        // wait till animation ends\n        setTimeout(() => setError(false), 100);\n    }\n\n    function onTemplateSave() {\n        updateTemplate(context.courier, templateId, template)\n            .then(() => setSnackbar({ open: true, message: \"Шаблон успешно обновлён!\" }))\n            .catch(() => {\n                setSnackbar({ open: true, message: \"Ошибка обновления шаблона!\" });\n                setError(true);\n            });\n    }\n\n    async function onAddAsset(file: File) {\n        return uploadFile(context.courier, file).then(response => ({\n            ...response,\n            filename: `${process.env.REACT_APP_BACKEND_URL}/${response.filename}`,\n        }));\n    }\n\n    async function onDeleteAsset(filename: string) {\n        return deleteFile(context.courier, filename);\n    }\n\n    return (\n        <SectionLayout>\n            <SectionTitle title=\"Редактирование шаблона\">\n                <Grid item>\n                    <Button\n                        variant=\"contained\"\n                        scheme=\"blue\"\n                        onClick={onTemplateSave}\n                        disabled={snackbar.open}\n                    >\n                        <CheckIcon />\n                        <Typography>Обновить</Typography>\n                    </Button>\n                </Grid>\n            </SectionTitle>\n            <Grid\n                css={theme => ({\n                    maxWidth: theme.maxTemplateWidth,\n                    margin: theme.spacing(4),\n                    position: \"relative\",\n                    transition: \"opacity 0.3s ease-in-out\",\n                })}\n            >\n                {!_.isEmpty(template) && (\n                    <TemplateEditor\n                        template={(template as unknown) as ITemplate}\n                        css={theme => ({ background: theme.colors.main })}\n                        onChange={onTemplateChange}\n                        onAddAsset={onAddAsset}\n                        onDeleteAsset={onDeleteAsset}\n                    />\n                )}\n            </Grid>\n            <Snackbar\n                open={snackbar.open}\n                error={error}\n                onClose={onSnackbarClose}\n                message={snackbar.message}\n            />\n        </SectionLayout>\n    );\n};\n","export * from \"./TemplateList\";\nexport * from \"./CreateTemplate\";\nexport * from \"./EditTemplate\";\n"],"sourceRoot":""}